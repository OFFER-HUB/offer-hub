/**
 * @fileoverview Root layout component for the Next.js application
 * @author Offer Hub Team
 */

import './globals.css';

import { Geist, Geist_Mono } from 'next/font/google';

import { EscrowProvider } from '@/providers/scrow.provider';
import type { Metadata } from 'next';
import { Toaster } from 'sonner';
import { TrustlessWorkProvider } from '@/providers/TrustlessWorkProvider';
import { WalletProvider } from '@/components/onboarding/WalletContext';
import ErrorBoundary from '@/components/common/error-boundary';
import { NotificationProvider } from '@/lib/contexts/NotificatonContext';
import { TalentProvider } from '@/lib/contexts/TalentContext';
import { OfferProvider } from '@/lib/contexts/OfferContext';
import { Suspense } from 'react';
import NotificationToast from '@/components/shared/NotificationToast';
import LoadingIndicator from '@/components/navigation/loading-indicator';
import { MessageProvider } from '@/lib/contexts/MessageContext';
import { KeyboardShortcutsProvider } from '@/components/common/keyboard-shortcuts-provider';
import { ThemeProvider } from '@/providers/theme-provider';
import { AuthProvider } from '@/providers/auth-provider';

import { ScrollToTop } from '@/components/common/scroll-to-top';
import { TanStackQueryProvider } from '@/providers/query-client-provider';


const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="light" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                try {
                  // Force light theme as default
                  var savedTheme = localStorage.getItem('offer-hub-theme');
                  var zustandTheme = localStorage.getItem('theme-storage');
                  var theme = 'light';
                  
                  if (savedTheme === 'dark' || (zustandTheme && JSON.parse(zustandTheme).state?.theme === 'dark')) {
                    theme = 'dark';
                  }
                  
                  document.documentElement.classList.remove('light', 'dark');
                  document.documentElement.classList.add(theme);
                } catch (e) {
                  document.documentElement.classList.add('light');
                }
              })();
            `,
          }}
        />
        <ThemeProvider>
          <AuthProvider>
            <TanStackQueryProvider>
              <TrustlessWorkProvider>
              <ErrorBoundary>
                <NotificationProvider>
                  <TalentProvider>
                    <MessageProvider>
                      <OfferProvider>
                        <WalletProvider>
                          <EscrowProvider>
                            <KeyboardShortcutsProvider>
                            {/* LoadingIndicator agregado según rama secundaria */}
                            <LoadingIndicator />
                            <Suspense fallback={null}>
                              <main>
                                {children}
                              </main>
                              <NotificationToast />
                              {/* ScrollToTop agregado según rama secundaria */}
                              <ScrollToTop />
                            </Suspense>
                            <Toaster position="top-right" />
                            </KeyboardShortcutsProvider>
                          </EscrowProvider>
                        </WalletProvider>
                      </OfferProvider>
                    </MessageProvider>
                  </TalentProvider>
                </NotificationProvider>
              </ErrorBoundary>
              </TrustlessWorkProvider>
            </TanStackQueryProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
